from dotenv import load_dotenv
import os
import requests
from youtube_transcript_api import YouTubeTranscriptApi
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.chains import LLMChain

# https://pypi.org/project/youtube-transcript-api/
# transcript = YouTubeTranscriptApi.get_transcript(youtube_ids[1], languages=['en'])
# transcript_list = YouTubeTranscriptApi.list_transcripts(youtube_ids[4])
# transcript = transcript_list.find_manually_created_transcript(['en'])
# print(transcript.fetch())

llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.0)

search_terms_prompt = PromptTemplate(
    input_variables=["text_input"],
    template="I want you to give me a single good youtube search query based on the following prompt:\n\n {text_input}"
)

YT_create_search_terms_chain = LLMChain(llm=llm, prompt=search_terms_prompt)


def get_yt_videos(query: str, max_results: int) -> list:
    """
    arguments:
    query: The search term generated by the agent based upon your prompt
    max_results: number of youtube videos to process

    returns a list video id's of the top n results from the search query the agent inputs 
    """

    # Get youtube API key
    load_dotenv()
    api_key = os.environ['yt_api_key'] 

    # Create search url
    base_url = 'https://www.googleapis.com/youtube/v3/'
    search_url = f'{base_url}search?key={api_key}&q={query}&maxResults={max_results}&part=snippet&type=video'
    
    # Send the GET request to the API.
    response = requests.get(search_url)

    #Fetch data
    data = response.json()
    items = data['items']
    return [item['id']['videoId'] for item in items]


def fetch_transcript(transcript) -> str:
    """
    arguments:
    transcript: <class 'youtube_transcript_api._transcripts.Transcript'>

    returns english transcript of the video in string format   
    """

    # https://pypi.org/project/youtube-transcript-api/
    text_transcript = [chunk['text'] for chunk in transcript.fetch()]
    return ' '.join(text_transcript)

def check_available_languages(video_id, lang_code):
    """
    arguments:
    video_id: id of the video
    lang_code: Desired language you want your transcript to have

    returns transcript of the video 
    """ 
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
    transcript_available = False 
    first_transcript_stored = False
    translation_available = False

    for transcript in transcript_list:
        if first_transcript_stored == False:
            first_transcript = transcript
            first_transcript_stored = True

        if transcript.language_code == lang_code:
            final_transcript = transcript.fetch()
            transcript_available = True

    if transcript_available == False and first_transcript_stored:
        if first_transcript.is_translatable:
            language_codes = [language['language_code'] for language in first_transcript.translation_languages]
            if lang_code in language_codes:
                translation_available = True
    
    if transcript_available:
        pass
    elif translation_available:
        final_transcript = first_transcript.translate(lang_code).fetch()
    else:
        final_transcript = None

    
           
    return final_transcript



print(check_available_languages("BJo61jHPAhM", 'orn'))





# english_transcript_found = False 
# first_transcript_stored = False

# for transcript in transcript_list:
#     if first_transcript_stored == False:
#         first_transcript = transcript
#         first_transcript_stored = True

#     if transcript.language_code == 'en':
#         english_transcript_found = True
#         final_transcript = transcript.fetch()
#         pass

# if english_transcript_found == False and first_transcript_stored:
#     if first_transcript.is_translatable:
#         language_codes = [language['language_code'] for language in first_transcript.translation_languages]
#         if 'en' in language_codes:
#             final_transcript = first_transcript.translate('en')#.fetch()
#         else:
#             pass

#     else:
#         pass

# print(type(final_transcript))#.fetch())
